#!/bin/bash


########################################
# ///                                        \\\
#  		You can edit your configuration here
#
#
########################################
megThreads=1500
megWordlist=/root/Wordlist/endpoint/meg.txt
massdnsWordlist=/root/Wordlist/subdomain/726w_subdomain.txt
ffuf_Wordlist=/root/Wordlist/endpoint/10w_common.txt


meg_randomfile="/root/OneDrive/output/meg/randompath.txt"



chromiumPath=/snap/bin/chromium
rootPath=/root/OneDrive/output/lazyrecon

########################################
# Happy Hunting
########################################






red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
reset=`tput sgr0`

SECONDS=0

domain=

usage() { echo -e "Usage: $0 -d domain [-e]\n  Select -e to specify excluded domains\n " 1>&2; exit 1; }

while getopts ":d:e:r:" o; do
    case "${o}" in
        d)
            domain=${OPTARG}
            ;;

            #### working on subdomain exclusion
        e)
            excluded=${OPTARG}
            ;;

        *)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))


discovery(){
	hostalive
  waybackrecon
  checkjsfile
  portscanning
   eyewitnesser


}

checkjsfile(){
  mkdir -p $rootPath/$domain/$foldername/html
  wget2 -i $rootPath/$domain/$foldername/wayback-data/jsurls.txt -P $rootPath/$domain/$foldername/wayback-data/jsfile
  mkdir -p $rootPath/$domain/$foldername/wayback-data/jsfile
  cd $rootPath/$domain/$foldername/wayback-data/jsfile
  ls -v | cat -n | while read n f; do mv -n "$f" "$n.ext"; done
  python3  ~/recon_tools/LinkFinder/linkfinder.py -i './*'   -o $rootPath/$domain/$foldername/html/${domain}_js.html
  python3  ~/recon_tools/LinkFinder/linkfinder.py -i './*'  -r ^/api/   -o $rootPath/$domain/$foldername/html/${domain}_js_api.html
  cd -
  mkdir -p /var/www/jsrecon/$doamin
  cp $rootPath/$domain/$foldername/html/${domain}_js.html /var/www/jsrecon/$domain/${domain}_js.html
  cp $rootPath/$domain/$foldername/html/${domain}_js_api.html /var/www/jsrecon/$domain/${domain}_js_api.html

}

waybackrecon () {
echo "Scraping wayback for data..."
cat $rootPath/$domain/$foldername/responsive.txt | waybackurls > $rootPath/$domain/$foldername/wayback-data/waybackurls.txt
cat $rootPath/$domain/$foldername/wayback-data/waybackurls.txt  | sort -u | unfurl --unique keys > $rootPath/$domain/$foldername/wayback-data/paramlist.txt
[ -s $rootPath/$domain/$foldername/wayback-data/paramlist.txt ] && echo "Wordlist saved to /$domain/$foldername/wayback-data/paramlist.txt"

cat $rootPath/$domain/$foldername/wayback-data/waybackurls.txt  | sort -u | grep -P "\w+\.js(\?|$)" | sort -u > $rootPath/$domain/$foldername/wayback-data/jsurls.txt
[ -s $rootPath/$domain/$foldername/wayback-data/jsurls.txt ] && echo "JS Urls saved to /$domain/$foldername/wayback-data/jsurls.txt"

cat $rootPath/$domain/$foldername/wayback-data/waybackurls.txt  | sort -u | grep -P "\w+\.php(\?|$) | sort -u " > $rootPath/$domain/$foldername/wayback-data/phpurls.txt
[ -s $rootPath/$domain/$foldername/wayback-data/phpurls.txt ] && echo "PHP Urls saved to /$domain/$foldername/wayback-data/phpurls.txt"

cat $rootPath/$domain/$foldername/wayback-data/waybackurls.txt  | sort -u | grep -P "\w+\.aspx(\?|$) | sort -u " > $rootPath/$domain/$foldername/wayback-data/aspxurls.txt
[ -s $rootPath/$domain/$foldername/wayback-data/aspxurls.txt ] && echo "ASP Urls saved to /$domain/$foldername/wayback-data/aspxurls.txt"

cat $rootPath/$domain/$foldername/wayback-data/waybackurls.txt  | sort -u | grep -P "\w+\.jsp(\?|$) | sort -u " > $rootPath/$domain/$foldername/wayback-data/jspurls.txt
[ -s $rootPath/$domain/$foldername/wayback-data/jspurls.txt ] && echo "JSP Urls saved to /$domain/$foldername/wayback-data/jspurls.txt"
}


hostalive(){
echo "Probing for live hosts..."
cat $rootPath/$domain/$foldername/$domain.txt  | httprobe -c 50 -t 3000 > $rootPath/$domain/$foldername/responsive.txt

cat $rootPath/$domain/$foldername/responsive.txt |unfurl -unique domain > $rootPath/$domain/$foldername/responsiveDomains.txt

cat $rootPath/$domain/$foldername/responsiveDomains.txt | httprobe -c 50 -t 3000 > $rootPath/$domain/$foldername/responsive.txt

cat $rootPath/$domain/$foldername/responsive.txt |unfurl -unique domain > $rootPath/$domain/$foldername/responsiveDomains.txt

cat $rootPath/$domain/$foldername/responsive.txt |
sed '/http:/d' > $rootPath/$domain/$foldername/ffuf_input.txt


echo  "${yellow}Total of $(wc -l $rootPath/$domain/$foldername/responsiveDomains.txt | awk '{print $1}') live subdomains were found${reset}"
}



recon(){

  echo "${green}Recon started on $domain ${reset}"
  echo "Listing subdomains using sublister..."
  sublist3r.py -d $domain -t 10 -v -o $rootPath/$domain/$foldername/$domain.txt > /dev/null
  echo "Checking certspotter..."
  curl -s https://certspotter.com/api/v0/certs\?domain\=$domain | jq '.[].dns_names[]' | sed 's/\"//g' | sed 's/\*\.//g' | sort -u | grep $domain >> $rootPath/$domain/$foldername/$domain.txt
  echo "Listing subdomains using assertfinder..."
  assetfinder --subs-only $domain >> $rootPath/$domain/$foldername/$domain.txt

  echo "Checking Passive source with massdns"
  massdns_seconed_check

  echo "Checking http://crt.sh"
  searchcrtsh $domain
  echo "Starting Massdns Subdomain discovery this may take a while"
  mass $domain > /dev/null
  echo "Massdns finished..."



  rm_dup_file $rootPath/$domain/$foldername/$domain.txt

  nsrecords $domain



  echo "Starting discovery..."
  discovery $domain



}



test_meg(){
  echo "filtering url which will return 200 status for any endpoint..."

  meg -c $megThreads --savestatus 200  $meg_randomfile  $rootPath/$domain/$foldername/responsive.txt $rootPath/$domain/$foldername/meg/remove  2>&1 | tee $rootPath/$domain/$foldername/meg/remove/error_hosts
  find $rootPath/$domain/$foldername/meg/remove  -mindepth 1 -maxdepth 1 -type d -print0 | xargs -0 rm -R
   awk '{print $2}'  $rootPath/$domain/$foldername/meg/remove/index | awk -F[/:] '{print $1"://"$4}' | awk '!seen[$0]++'  > $rootPath/$domain/$foldername/meg/remove/host_to_remove
  awk '{print $4}'  $rootPath/$domain/$foldername/meg/remove/error_hosts | awk -F[/:] '{print $1"://"$4}'| sort | uniq -c | sort -nr | awk '$1>3 {print $2}'|awk '!seen[$0]++' >> $rootPath/$domain/$foldername/meg/remove/host_to_remove
  rm_dup_file $rootPath/$domain/$foldername/meg/remove/host_to_remove
  comm -2 -3 <(sort $rootPath/$domain/$foldername/responsive.txt ) <(sort $rootPath/$domain/$foldername/meg/remove/host_to_remove) > $rootPath/$domain/$foldername/meg/filtered_url.txt
}

run_meg(){
  echo "Starting meg..."
  meg -c $megThreads  --savestatus 200 $megWordlist $rootPath/$domain/$foldername/meg/filtered_url.txt  $rootPath/$domain/$foldername/meg/output  2>&1 | tee $rootPath/$domain/$foldername/meg/output/error.log
  find $rootPath/$domain/$foldername/meg/output  -mindepth 1 -maxdepth 1 -type d -print0 | xargs -0 rm -R

}

meger(){
  test_meg
  run_meg

}



eyewitnesser(){
  echo "Starting Eyewitness scan..."
  timeout 3h EyeWitness.py --web  --no-prompt  -f $rootPath/$domain/$foldername/ffuf_input.txt --timeout 30  -d $rootPath/$domain/$foldername/eyewitness
  cd $rootPath/$domain/$foldername/eyewitness/screens
  fdupes . -r -f -1 -S -d
  cd -
}


altdns(){
rm_dup_file $rootPath/$domain/$foldername/$domain.txt

linecount=$(wc -l $rootPath/$domain/$foldername/$domain.txt | awk '{print $1}')
if [[ $linecount -gt 500 ]]; then
  echo "Too many Possible subdomain seems to contain lots of false positive, skipping altdns which may cause Address Boundary Error"
  return
fi

touch $rootPath/$domain/$foldername/altdns_temp
altdns -i $rootPath/$domain/$foldername/$domain.txt -o $rootPath/$domain/$foldername/altdns_temp -w  /root/Wordlist/altdnsword.txt

echo "Starting resolving permution of subdomain with massdns "
massdns -r /root/Wordlist/resolver.txt -t A -o S  $rootPath/$domain/$foldername/altdns_temp --outfile  $rootPath/$domain/$foldername/massdns_temp

cat $rootPath/$domain/$foldername/massdns_temp >> $rootPath/$domain/$foldername/massdns_temp.txt
awk '{print $1}' $rootPath/$domain/$foldername/massdns_temp >> $rootPath/$domain/$foldername/$domain.txt
rm_dup_file  $rootPath/$domain/$foldername/$domain.txt


echo "clear temporary massdns file $rootPath/$domain/$foldername/massdns_temp "
rm $rootPath/$domain/$foldername/massdns_temp
}




portscanning(){
  touch $rootPath/$domain/$foldername/domain_ip_tmp.txt
  while read line; do
     ip=$(dig +short $line @8.8.8.8| grep -m 1 -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
     if [[ -z $ip ]]; then
       continue
     fi
     echo "$line     $ip" >>$rootPath/$domain/$foldername/domain_ip_tmp.txt
  done <  $rootPath/$domain/$foldername/responsiveDomains.txt

  cat $rootPath/$domain/$foldername/domain_ip_tmp.txt | awk '!seen[$2]++' > $rootPath/$domain/$foldername/domain_ip.txt

  rm $rootPath/$domain/$foldername/domain_ip_tmp.txt

  touch $rootPath/$domain/$foldername/masscan.out

  awk '{print $2}' $rootPath/$domain/$foldername/domain_ip.txt | awk '!seen[$0]++' > $rootPath/$domain/$foldername/only_ip.txt

ipport_mass -f  $rootPath/$domain/$foldername/only_ip.txt -o $rootPath/$domain/$foldername/portscanning

}

massdns_seconed_check(){
  cat $rootPath/$domain/$foldername/$domain.txt | massdns -r /root/Wordlist/resolver.txt -t A -q -o S -w  $rootPath/$domain/$foldername/domaintemp.txt

 awk '{print $1}'  $rootPath/$domain/$foldername/domaintemp.txt > $rootPath/$domain/$foldername/$domain.txt

 cat $rootPath/$domain/$foldername/domaintemp.txt >> $rootPath/$domain/$foldername/massdns_temp.txt

 rm $rootPath/$domain/$foldername/domaintemp.txt
}

searchcrtsh(){

 /root/recon_tools/massdns/scripts/ct.py $domain 2>/dev/null > $rootPath/$domain/$foldername/tmp.txt
 [ -s $rootPath/$domain/$foldername/tmp.txt ] && cat $rootPath/$domain/$foldername/tmp.txt | massdns -r /root/Wordlist/resolver.txt -t A -q -o S -w  $rootPath/$domain/$foldername/crtsh.txt


awk '{print $1}'  $rootPath/$domain/$foldername/crtsh.txt >> $rootPath/$domain/$foldername/$domain.txt


 cat $rootPath/$domain/$foldername/crtsh.txt >> $rootPath/$domain/$foldername/massdns_temp.txt
}

mass(){
/root/recon_tools/massdns/scripts/subbrute.py $massdnsWordlist $domain | massdns -r /root/Wordlist/resolver.txt -t A -q -o S | grep -v 142.54.173.92 > $rootPath/$domain/$foldername/mass.txt

awk '{print $1}' $rootPath/$domain/$foldername/mass.txt >> $rootPath/$domain/$foldername/$domain.txt

cat $rootPath/$domain/$foldername/mass.txt >> $rootPath/$domain/$foldername/massdns_temp.txt
}

nsrecords(){

                echo "${green}Started dns records check...${reset}"
                echo "Looking into CNAME Records..."


                cat $rootPath/$domain/$foldername/massdns_temp.txt | awk '{print $3}' |  awk '!seen[$0]++' | while read line; do
                wildcard=$(cat $rootPath/$domain/$foldername/massdns_temp.txt | grep -m 1 $line)
                echo "$wildcard" >> $rootPath/$domain/$foldername/cleantemp.txt
                done



                cat $rootPath/$domain/$foldername/cleantemp.txt | grep CNAME >> $rootPath/$domain/$foldername/cnames.txt
                cat $rootPath/$domain/$foldername/cnames.txt | sort -u | while read line; do
                hostrec=$(echo "$line" | awk '{print $1}')
                if [[ $(host $hostrec | grep NXDOMAIN) != "" ]]
                then
                echo "${red}Check the following domain for NS takeover:  $line ${reset}"
                echo "$line" >> $rootPath/$domain/$foldername/pos.txt
                else
                echo -ne "working on it...\r"
                fi
                done
                sleep 1


                cat $rootPath/$domain/$foldername/cleantemp.txt | awk  '{print $1}' | while read line; do
                x="$line"
                echo "${x%?}" >> $rootPath/$domain/$foldername/$domain.txt
                done

                sed 's/\.$//' $rootPath/$domain/$foldername/$domain.txt | awk '!seen[$0]++' > /tmp/$domain.txt
                mv /tmp/$domain.txt $rootPath/$domain/$foldername/$domain.txt
        }



logo(){
  #can't have a bash script without a cool logo :D
  echo "${red}
 _     ____  ____ ___  _ ____  _____ ____  ____  _
/ \   /  _ \/_   \\\  \///  __\/  __//   _\/  _ \/ \  /|
| |   | / \| /   / \  / |  \/||  \  |  /  | / \|| |\ ||
| |_/\| |-||/   /_ / /  |    /|  /_ |  \__| \_/|| | \||
\____/\_/ \|\____//_/   \_/\_\\\____\\\____/\____/\_/  \\|
${reset}                                                      "
}


main(){
  logo


  mkdir -p $rootPath/$domain
  mkdir -p $rootPath/$domain/$foldername
  mkdir -p $rootPath/$domain/$foldername/wayback-data/
  mkdir -p $rootPath/$domain/$foldername/eyewitness
  touch $rootPath/$domain/$foldername/crtsh.txt
  touch $rootPath/$domain/$foldername/mass.txt
  touch $rootPath/$domain/$foldername/cnames.txt
  touch $rootPath/$domain/$foldername/pos.txt
  touch $rootPath/$domain/$foldername/$domain.txt
  touch $rootPath/$domain/$foldername/massdns_temp.txt
  touch $rootPath/$domain/$foldername/tmp.txt
  touch $rootPath/$domain/$foldername/domaintemp.txt
  touch $rootPath/$domain/$foldername/cleantemp.txt

  rm_resolver
  recon $domain
  ffuf_mass -f $rootPath/$domain/$foldername/ffuf_input.txt -o $rootPath/$domain/$foldername/ffuf_ouput.txt
  echo "${green}Scan for $domain finished successfully${reset}"
  duration=$SECONDS
  echo "Scan completed in : $(($duration / 60)) minutes and $(($duration % 60)) seconds."
  stty sane
  tput sgr0
}

todate=$(date +'%Y-%m-%d-%H-%M')
path=$(pwd)
foldername=recon-$todate

export rootPath
export domain
export foldername
mkdir -p $rootPath/$domain/$foldername/nmap


main $domain
